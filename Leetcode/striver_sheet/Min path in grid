//dp day 26
Question : 

Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path.

Note: You can only move either down or right at any point in time.

 

Example 1:


Input: grid = [[1,3,1],[1,5,1],[4,2,1]]
Output: 7
Explanation: Because the path 1 → 3 → 1 → 1 → 1 minimizes the sum.
Example 2:

Input: grid = [[1,2,3],[4,5,6]]
Output: 12
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 200
0 <= grid[i][j] <= 100


Solution : 

class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
        int n = grid.size();
        int m = grid[0].size();
        vector<vector<int>>dp(n+1,vector<int>(m+1,INT_MAX));
      
        for(int i = 1;i<=n;i++){
            
            for(int j = 1;j<=m;j++){
                if(dp[i-1][j]==INT_MAX&&dp[i][j-1]==INT_MAX){dp[i][j] = grid[i-1][j-1]; continue;}
                    dp[i][j] =  grid[i-1][j-1]+min(dp[i-1][j],dp[i][j-1]);
            }
        }
        return dp[n][m];
        
    }
};
