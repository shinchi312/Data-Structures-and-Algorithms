//day 26 dp

Question : 

Given a non-empty array nums containing only positive integers, find if the array can be partitioned into two subsets such that the sum of elements in both subsets is equal.

 

Example 1:

Input: nums = [1,5,11,5]
Output: true
Explanation: The array can be partitioned as [1, 5, 5] and [11].
Example 2:

Input: nums = [1,2,3,5]
Output: false
Explanation: The array cannot be partitioned into equal sum subsets.
 

Constraints:

1 <= nums.length <= 200
1 <= nums[i] <= 100


Solution : 

class Solution {
public:
    bool canPartition(vector<int>& nums) {
       int sum = 0;
        for(auto u : nums){sum+=u;}
        if(sum&1)return false;
        vector<int>dp(sum/2+1);
        dp[0] = 1;
        for(int i = 0;i<nums.size();i++){
            for(int j = sum/2;j>=0;j--){
                if(j+nums[i]<=sum/2&&dp[j]){dp[j+nums[i]] = 1;}
            }
        }
        return dp[sum/2];
        
    }
};
