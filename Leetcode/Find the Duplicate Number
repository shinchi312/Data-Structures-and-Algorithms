Given an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.

There is only one repeated number in nums, return this repeated number.

You must solve the problem without modifying the array nums and uses only constant extra space.

 

Example 1:

Input: nums = [1,3,4,2,2]
Output: 2
Example 2:

Input: nums = [3,1,3,4,2]
Output: 3
 

Constraints:

1 <= n <= 105
nums.length == n + 1
1 <= nums[i] <= n
All the integers in nums appear only once except for precisely one integer which appears two or more times.


logic : use the concept of linked list cycle first find collision and then make the fast pointer point at nums[0] and move it with speed of 1


for better understanding see : https://takeuforward.org/data-structure/find-the-duplicate-in-an-array-of-n1-integers/

class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        int fast = nums[0];
        int slow = nums[0];
       do {
            slow = nums[slow];
            fast = nums[nums[fast]];
        }while(fast!= slow );
        fast = nums[0];
        while(fast != slow){
            slow = nums[slow];
            fast = nums[fast];
        }
        return slow;
     
    }
};
