Write an efficient algorithm that searches for a value target in an m x n integer matrix matrix. This matrix has the following properties:

Integers in each row are sorted from left to right.
The first integer of each row is greater than the last integer of the previous row.
 

Example 1:


Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3
Output: true
Example 2:


Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13
Output: false
 

Constraints:

m == matrix.length
n == matrix[i].length
1 <= m, n <= 100
-104 <= matrix[i][j], target <= 104


logic : use binary search to find lower bound in col then find it in the row 

class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        vector<int>temp;
        int n = matrix.size();
        int m = matrix[0].size();
        for(int i = 0;i<n;i++){temp.push_back(matrix[i][m-1]);}
        int index = lower_bound(temp.begin(),temp.end(),target)-temp.begin();
        if(index==n)return false;
        return binary_search(matrix[index].begin(),matrix[index].end(),target);
        
    }
};
