Very Very good problem of Dynamic programming : 

You are given an array a consisting of n distinct positive integers.

Let's consider an infinite integer set S which contains all integers x that satisfy at least one of the following conditions:

1. x=ai for some 1≤i≤n.
2. x=2y+1 and y is in S.
3. x=4y and y is in S.
For example, if a=[1,2] then the 10 smallest elements in S will be {1,2,3,4,5,7,8,9,11,12}.

Find the number of elements in S that are strictly smaller than 2p. Since this number may be too large, print it modulo 109+7.

logic : as question suggest we need to find combinations using dp taking p size of dp and dp[i] = number of integers present in the set lying in the [2^i-1 to 2^i)
1. as for first case we need to find number of elements that are in a array and present between [2^i-1 to 2^i) and add them in dp
2. let y be the integer lying between [2^i-1 to 2^i) then (y-1)/2 will be lying  in [2^i-2 to 2^i-1) so we will add dp[i-1] i.e. number of integers lying between [2^i-2 to 2^i-1)
3. again let y be the integer lying between [2^i-1 to 2^i) then y/4 will be lying in [2^i-3 to 2^i-2) so we will add dp[i-2]
ans will be sum over dp array that will count total number of integers
but first we will count useful numbers which are number that cannot be formed by applying any operation to a number  in array a as there will be duplicate numbers that will be generated



#include <bits/stdc++.h>
using namespace std;
//#define int long long
using dd = vector<vector<int>>;
#define rep(i, n) for(int i = 0; i < n; ++i)
#define test int t;cin>>t;while(t--)
#define testx int t;cin>>t;for(int x=1;x<=t;x++)
#define IOS ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define endl '\n'


int32_t main() {
    IOS
    int mod = 1e9 + 7;
   int n,p;
   cin>>n>>p;
   vector<int>dp(p);

   vector<int>a(n);
   rep(i,n) cin>>a[i];
   sort(a.begin(),a.end());
   set<int> useful;
   for(int i = 0;i<n;i++){
       int x = a[i];
       bool flag = false;
       while(x>0){
           if(useful.count(x)){flag = true;}
           if(x&1){x>>=1;}
           else if(x&3)break;
           else{x>>=2;}
       }
       if(!flag){useful.insert(a[i]);}
          }
    vector<int>cnt(30);
    for(auto u: useful){
        cnt[__lg(u)]++;
    }
    dp[0] = 1;int ans = 0;
    for(int i = 0;i<p;i++){
        if(i<30){dp[i]=cnt[i];}
        if(i>=1){dp[i]+=dp[i-1];if(dp[i]>=mod){dp[i]-=mod;}}
        if(i>=2){dp[i]+=dp[i-2];if(dp[i]>=mod){dp[i]-=mod;}}
        ans+=dp[i];
        if(ans>=mod)ans-=mod;
        
    }
    cout<<ans<<endl;
    


}
