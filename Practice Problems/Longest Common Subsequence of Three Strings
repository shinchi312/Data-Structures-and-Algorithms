Given lowercase alphabet strings a, b, and c, return the length of their longest common subsequence.

Constraints

0 ≤ n ≤ 100 where n is the length of a
0 ≤ m ≤ 100 where m is the length of b
0 ≤ k ≤ 100 where k is the length of c
Example 1
Input
a = "epidemiologist"
b = "refrigeration"
c = "supercalifragilisticexpialodocious"
Output
5
Explanation
The longest common subsequence is "eieio".
logic : same as lcs in 2 strings but we will be working here in 3 dimensions instead of two

code : 
int solve(string a, string b, string c) {
  
    int m = a.size();
    int n = b.size();
    int o = c.size();
    int L[m+1][n+1][o+1];
 
  
    for (int i=0; i<=m; i++)
    {
        for (int j=0; j<=n; j++)
        {
            for (int k=0; k<=o; k++)
            {
                if (i == 0 || j == 0||k==0)
                    L[i][j][k] = 0;
 
                else if (a[i-1] == b[j-1] && a[i-1]==c[k-1])
                    L[i][j][k] = L[i-1][j-1][k-1] + 1;
 
                else
                    L[i][j][k] = max(max(L[i-1][j][k],
                                         L[i][j-1][k]),
                                     L[i][j][k-1]);
            }
        }
    }

    return L[m][n][o];
}
