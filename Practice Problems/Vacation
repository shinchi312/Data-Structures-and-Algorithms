Taro's summer vacation starts tomorrow, and he has decided to make plans for it now.

The vacation consists of N days. For each i (1≤i≤N), Taro will choose one of the following activities and do it on the i-th day:

A: Swim in the sea. Gain a 
i
​
  points of happiness.
B: Catch bugs in the mountains. Gain b 
i
​
  points of happiness.
C: Do homework at home. Gain c 
i
​
  points of happiness.
As Taro gets bored easily, he cannot do the same activities for two or more consecutive days.

Find the maximum possible total points of happiness that Taro gains.

# dynamic programming 
link : https://atcoder.jp/contests/dp/tasks/dp_c

approach : my approach was to find the maximum score by selecting current item for which we have to add bigger of left out two arrays

code :
#include <bits/stdc++.h>
using namespace std;
#define int long long
using dd = vector<vector<int>>;
#define rep(i, n) for(int i = 0; i < n; ++i)
#define test int t;cin>>t;while(t--)
#define testx int t;cin>>t;for(int x=1;x<=t;x++)
#define IOS ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define endl '\n'

int32_t main() {
    IOS
    
    int n ;
    cin>>n;
    vector<vector<int>>a(3,vector<int>(n));
    
   for(int i =0;i<n;i++)cin>>a[0][i]>>a[1][i]>>a[2][i];
  
   
    
    vector<vector<int>>dp(n+1,vector<int>(3));
    
    
    for(int i = 1;i<=n;i++){
        dp[i][0] = max(dp[i-1][1],dp[i-1][2])+a[0][i-1];
        dp[i][1] = max(dp[i-1][0],dp[i-1][2])+a[1][i-1];
        dp[i][2] = max(dp[i-1][1],dp[i-1][0])+a[2][i-1];
    }
   
    cout<<max(dp[n][0],max(dp[n][1],dp[n][2]));

}
