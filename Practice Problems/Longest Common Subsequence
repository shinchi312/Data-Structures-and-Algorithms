You are given strings s and t. Find one longest string that is a subsequence of both s and t.

logic : dp[i][j] = represents LCS of in  i length of a and j length b
so 
if(a[i]==b[j]) dp[i][j] = 1+dp[i-1][j-1]
else dp[i][j] = max(dp[i-1][j],dp[i][j-1])


#include <bits/stdc++.h>
using namespace std;
#define int long long
using dd = vector<vector<int>>;
#define rep(i, n) for(int i = 0; i < n; ++i)
#define test int t;cin>>t;while(t--)
#define testx int t;cin>>t;for(int x=1;x<=t;x++)
#define IOS ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define endl '\n'
int LINF = 1001002003004005006ll;
int32_t main() {
    IOS
    string s,t;
    cin>>s>>t;
    int n = s.size();
    int m = t.size();
    dd dp(n+1,vector<int>(m+1));
    string ans ="";
    for(int i = 1;i<=n;i++){
        for(int j = 1;j<=m;j++){
            if(t[j-1]==s[i-1]){dp[i][j] = dp[i-1][j-1]+1;}
            else dp[i][j] = max(dp[i-1][j],dp[i][j-1]);
        }
    }
    int i = n;int j = m;
    while(i!=0&&j!=0){
        if(s[i-1]==t[j-1]){ans+=t[j-1];i--;j--;}
        else{
            if(dp[i-1][j]>dp[i][j-1]){i--;}
            else j--;
        }
    }
    reverse(ans.begin(),ans.end());
    cout<<ans;



}
