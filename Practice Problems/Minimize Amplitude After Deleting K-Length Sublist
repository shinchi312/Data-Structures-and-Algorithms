You are given a list of integers nums and an integer k. Given that you must first remove a sublist of length k, return the minimum resulting max(nums) - min(nums).

Constraints

0 ≤ k < n ≤ 100,000 where n is the length of nums

eg 
Example 1
Input
nums = [1, 2, 9, 8, 7, 3]
k = 3
Output
2


logic : precompute the minimum and maximum number after deleting current window 

int solve(vector<int>& nums, int k) {
    int n = nums.size();
    
   vector<int>greater(n);
   vector<int>smaller(n);
   
   for(int i = n-1;i>=0;i--){
     if(i+1==n){smaller[i] = nums.back();greater[i]= nums.back();}
     else {
         smaller[i] = min(smaller[i+1],nums[i]);
         greater[i] = max(greater[i+1],nums[i]);
     }
   }
int ans = INT_MAX;
int g = INT_MIN;
int s = INT_MAX;
    for(int i =0;i<n-k;i++){
       int m = max(g,greater[i+k]);
       int m1 = min(s,smaller[i+k]);
       ans = min(ans,m-m1);
       g = max(g,nums[i]);
       s = min(s,nums[i]);
    }
    ans= min(ans,g-s);
    return ans;
}
