There is a directed graph G with N vertices and M edges. The vertices are numbered 1,2,…,N, and for each i (1≤i≤M), the i-th directed edge goes from Vertex x 
i

  to y 
i

 . G does not contain directed cycles.

Find the length of the longest directed path in G. Here, the length of a directed path is the number of edges in it.

logic : my logic is to use topological sort to and assign dp[connect_node] = max(dp[head]+1,dp[connect_node]) dp[n] represents longest path from one of its head 

we can also use dfs for the solution

code : 

#include <bits/stdc++.h>
using namespace std;
#define int long long
using dd = vector<vector<int>>;
#define rep(i, n) for(int i = 0; i < n; ++i)
#define test int t;cin>>t;while(t--)
#define testx int t;cin>>t;for(int x=1;x<=t;x++)
#define IOS ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define endl '\n'
int LINF = 1001002003004005006ll;
int s = 1e5+1;
vector<vector<int>>adj(s);
vector<int>ind(s);
void addEdge(int u,int v){
    adj[u].push_back(v);
}
int32_t main() {
    IOS
int n,m;
cin>>n>>m;
rep(i,m){
    int u,v;
    cin>>u>>v;
    ind[v]++;
    addEdge(u,v);
}
queue<int>q;
for(int i =0;i<s;i++){
    if(ind[i]==0)q.push(i);
}
map<int,int>dp;
int ans = INT_MIN;
while(!q.empty()){
    int head = q.front();
    q.pop();
    ans = max(dp[head],ans);
    for(auto u : adj[head]){ind[u]--;
    dp[u] = max(dp[u],dp[head]+1);
        if(ind[u]==0)q.push(u);
    }
}
cout<<ans;


}
