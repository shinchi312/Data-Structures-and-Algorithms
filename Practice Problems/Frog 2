There are N stones, numbered 1,2,…,N. For each i (1≤i≤N), the height of Stone i is h 
i
​
 .

There is a frog who is initially on Stone 1. He will repeat the following action some number of times to reach Stone N:

If the frog is currently on Stone i, jump to one of the following: Stone i+1,i+2,…,i+K. Here, a cost of ∣h 
i
​
 −h 
j
​
 ∣ is incurred, where j is the stone to land on.
Find the minimum possible total cost incurred before the frog reaches Stone N.

link : https://atcoder.jp/contests/dp/tasks/dp_b


#include <bits/stdc++.h>
using namespace std;
#define int long long
using dd = vector<vector<int>>;
#define rep(i, n) for(int i = 0; i < n; ++i)
#define test int t;cin>>t;while(t--)
#define testx int t;cin>>t;for(int x=1;x<=t;x++)
#define IOS ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define endl '\n'
int32_t main() {
    IOS

int n,k ;
cin>>n>>k;
int h[n];
vector<int>dp(n,INT_MAX);
dp[0] = 0;
rep(i,n){cin>>h[i];}

for(int i = 1;i<n;i++){
    
for(int j=1;j<=k;j++) if(i-j>=0)    dp[i] = min(dp[i-j]+abs(h[i-j]-h[i]),dp[i]);
}
cout<<dp[n-1];

}
