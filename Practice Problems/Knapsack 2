There are N items, numbered 1,2,…,N. For each i (1≤i≤N), Item i has a weight of w 
i
​
  and a value of v 
i
​
 .

Taro has decided to choose some of the N items and carry them home in a knapsack. The capacity of the knapsack is W, which means that the sum of the weights of items taken must be at most W.

Find the maximum possible sum of the values of items that Taro takes home.

# dynamic programming 
small variation in classical knapsack approach to fit within the constraints 

link : https://atcoder.jp/contests/dp/tasks/dp_e

code : 
#include <bits/stdc++.h>
using namespace std;
#define int long long
using dd = vector<vector<int>>;
#define rep(i, n) for(int i = 0; i < n; ++i)
#define test int t;cin>>t;while(t--)
#define testx int t;cin>>t;for(int x=1;x<=t;x++)
#define IOS ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define endl '\n'
int LINF = 1001002003004005006ll;
int32_t main() {
    IOS
int n,W;
cin>>n>>W;
int size = 200005;
vector<int>dp(size,LINF);
dp[0]= 0;
rep(i,n){
    int w,v;
    cin>>w>>v;
    for(int j = size-1;j>=0;j--){
        if(j+v<size&&dp[j]!=LINF){dp[j+v]= min(dp[j]+w,dp[j+v]);}
    }
}
for(int i = size-1;i>=0;i--){
    if(dp[i]<=W){cout<<i; return 0;}
}





}
